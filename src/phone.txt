Command Reference
as of 2017-02-20

sys ...
mac ...
radio ...
When in Lora/LoraWAN mode, send these commands directly through to the RN2483.  Note that this
is extremely tricky because you are interfering with the operation of the lora.c state machine,
and so more often than not you will screw something up.


at+ ...
When in Fona mode, send these commands directly through to the Fona.  Note that this
is extremely tricky because you are interfering with the operation of the fona.c state machine,
and so more often than not you will screw something up.

rad
cpm
geiger
Kick off a geiger sensor measurement cycle ASAP.

bat
Badly-named shortcut for scheduling the entire g-basics group of sensors, while automatically
turning on max sensor debugging.

fail
Force cellular mode to test lora-to-cellular failover behavior.

fona
lora
lorawan
none
Regardless of how configured in NVRAM, go through comms init as though the unit were configured
with this transport.  This is just for the session; it does not save this mode back to NVRAM.
The "none" command goes back to the NVRAM default.

upload
Regardless of buffering mode or where the sensor scheduling state currently is, try to get an
upload of pending data scheduled ASAP.  (It might take a few minutes if someone else is currently
using the UART, such as PMS or GPS.)

ccc
Show the current state of the oneshot communications upload state machine.  If you're ever getting
impatient, thinking "wtf is going on? why is nothing happening?", this will help you understand.
And if you get really impatient and want to kick things into going
faster so you can debug, see the "test" command with no args.

flip
Invert the orientation of the display, and save it in NVRAM.

sss
Show the current state of the sensor state machine.  If you're ever getting impatient, thinking
"wtf is going on? why is nothing happening?" this will help you understand.  And if you get really
impatient and want to kick things into going faster so you can debug, see the "test" command with no args.

q
sample
measure
Quickly start scheduling all sensors to measure - in case you're impatient waiting for their normal time frames.

gupdate
grefresh
These commands simulate what the device does after motion is detected - that is, they mark the GPS
to be in a mode where it should be refreshed.  Of course, this doesn't happen right off because the
various GPS sensors have their own timing.  For the UGPS, look at sensor-defs.h to see what the
typical repeat timing is.  It'll generally be in the next 10m or so.

glkg
gfake
If you get tired of waiting every time you boot the device for it to sense GPS, and you are debugging
over and over, type "gps lkg" to read the last-known-good GPS value out of NVRAM (which will get you
past waiting for GPS during this one debugging session, or type "gfake" to actually assign fake
gps coords of 1.23/4.56 into NVRAM so it won't ask at all until you next load firmware onto the device.

gps
Just tells you if currently you are in a state where the device has a GPS position.  It doesn't even
tell you what that position is, because at the time I wrote it I hadn't even added FP support.

gpio XXX
Turns a gpio pin on/off.  XXX is the pin number * 10, and then you put 0 or 1 in the low digit for
on or off.  Like, "gpin 211" would be turning pin 21 on, and 210 would turn it off.

mtu XXX
Really special-purpose test mode that starts repeatedly sending larger and larger messages to the
current communications device so that we can see where things start misbehaving.

temp
env
A really unreliable way of seeing what the last known environmental readings are.  It sometimes works,
however the sensor state machine frequently clears out those last known values. 

state
At any given moment in time, this tells you the current state table state for whatever the currently
selected comm mode is.  That is, in lora it tells you lora state.  In fona, it tells you fona state.

stats
Sets the flat so that the next time communications happens, the unit will upload a single Stats
message with the current device stats - exactly as it does every 12 hours.  It also instructs the
device to poll for, and pull down, any pending commands sent via Slack on the service.

hello
Sets the flat so that the next time communications happens, the unit will upload a massive batch
of Stats messages with ALL the current device stats, just as if the service had issued a "send hello"
to the device.  It also instructs the device to poll for, and pull down, any pending commands sent
via Slack on the service.

reset
Resets the currently-selected communications device, ie Lora or Fona.  Note that this only makes
sense when operating in a non-oneshot mode, because when in a oneshot mode a reset occurs every
time the device is awakened.

drop
Simulates what happens after 15 minutes after boot, which is to drop bluetooth and drop the LEDs.
This command is super useful when measuring current draw on the device.  Just enter via BT on the
phone, type "drop", and wait about 2 minutes.  You'll see the current drop as the BT stack shuts
down completely after the current advertising expires.

ind
A subset of drop, shut down the LED indicators.

nogps
Shut down the GPS module or subsystem, largely when debugging logic that depends upon there being
a valid GPS location.

listen
Put the Lora module into a state in which it is constantly listening for inbound Lora messages,
rather than going into a Sleep state.  This is the mode that we use when turning a device into
a "Lora Relay", and is otherwise largely a super-debug mode for P2P lora development.

d
Report the current state of the various debug flags.  Flags that show in uppercase are ON,
and flags that show in lowercase are off.  The flags are displayed as the commands that are
used to toggle them.

0
Turn off ALL debug flags.

1
Turn on many of the most common debug flags.  If you want to see what those are, use the "d"
command after doing a 1 command

x
Turn on ALL the debug flags.  This is super-verbose and you'll never do it.

rx
Toggle the display of showing everything received by the UART by comms.

tx
Toggle the display of showing everything sent to the UART by comms.

c
Toggle rx and tx in tandem.  This is by far one of the most useful commands when you're
trying to debug lora or fona.

cx
Toggle an extra verbose level of comms debugging.

a
Toggle maximum air sensor debug info.  This is a raw dump of the data received from sensors.
It should be used in conjunction with sx, not as a substitute.

s
Toggle basic sensor debug info, which is really useful.  This is mainly targeted at giving you
info about the sensor scheduler as it changes state.

sx
Toggle deeper and more verbose sensor debug info.  This flag is used by almost all sensors to give
an extra level of debug output while the sensors are active.

sxx
Toggle a ridiculous level of sensor debug info, for when you're desperate.

sxxx
Toggle a more-than-ridiculous level of sensor debug info, for when you're debugging the sensor scheduler.

sp
Toggle a very brief form of "sss" that occurs every 15 seconds.

g
gx
Toggle GPS verbose debug info.  This really should just be "gx", but I keep making mistakes.

ver
Show the current firmware version.

burn <on/off>
Turns burn-in mode on or off, for the case where you want to test the device but you are using
a production build that doesn't initiate in burn-in mode.  Burn-in mode has the following differences:
- cycle back and forth every 15m between comms modes
- runs fona unbuffered
- turn motion sensing off
- be fast mode like test mode
- has the bt flag to extend bt
- has air counts
- does a "stats" command hourly but only on fona, with TONS of new stats values
- implements a lot of new stats fields in the sensors
- has the "test" flag on the service so the data doesn't get to the database
- validates that it IS getting ugps data, then times it out with a special location
- this is the default mode of the special build that i do

test <on/off>
t <on/off>
This tells both the communications scheduler and the sensor scheduler to ridiculously reduce,
but not eliminate, repeat delays. This is primarily useful when you are super impatient and you
want to watch "normal operations" of the entire device, but want it to occur very fast.  This
draws a ton of power and over-communicates, so generally please just use this when debugging.

test s-xxx
t s-xxx
This disables communications and tells the sensor scheduler to repeatedly schedule measurement
of just the sensor that is specified, over and over and over.  If you use "off" or anything
unrecognized as the argument, it returns the scheduler back to its normal mode of operation.
The master list of sensors is in sensor-defs.h, and only a small subset of sensor are built
into any given config of the product.  For example, "pms" and "opc" are not configured into
solarcast, but instead "air" is active which does them in tandem. But, as a quick reference:
s-temp s-bme s-ina s-max01 s-max43v s-max43% s-motion s-geiger
s-twigps s-ugps g-ugps s-pms s-opc s-air

blink
id
When you've got multiple devices on the bench and have forgotten to use a post-it to denote
which one has what device ID, this command will cause the LEDs on that device to go a bit
crazy so you can tell which one is which.  You're welcome.

recv <command>
This is a way of testing local device behavior in response to <command> which would have otherwise
been received from the service via a Slack command.  For example, "recv hello" is the local
equivalent of doing "send <deviceid> hello" in slack.

bt
Toggle whether or not bluetooth keepalive is set, in NVRAM.  If it is set, BT will be kept active
upon any/all device restarts, even if you fail to connect into the device via Bluetooth in the
first 15 minutes.  This is useful if you've got a large set of devices you're testing, and you
don't want to be forced to remember to connect to each of them when power cycling them during
a test mode.  (Note that this is just a shortcut to the flags arg in cfgdev.)

cfgdev
cfgsvc
cfgttn
cfglab
cfgsen
cfggps
These are all commands used locally on the device to set NVRAM configuration information.  If you
type them with no args you'll see a not-super-helpful help string that will help you remember the
format of what to type.  If you really want to understand what they do, read the source code and
feel free to improve this doc.  You should also note that many of these commands take multiple
arguments with either '.' or '/' as a separator.  The way the parsing works is that if you enter
less arguments than the full list of arguments, the prior values are assumed.  For example,
"cfgdev 3" is all it takes to set the WAN to Fona, or cfgdev '3.0.0.20' is how you change the
oneshot period to 20m.

cfgdev auto
cfgdev lora
cfgdev lorawan (or equivalently) cfgdev ttn
cfgdev fona (or equivalently) cfgdev cell
ct
cfgdev mobile
These are just a few shortcuts that have been implemented to set the WAN argument of cfgdev to
the most commonly used values.  Note that the "ct" command is the equivalent of typing "cfgdev cell".

st
Performs a "Stats Test", which simply has the effect of doing two things: a) it ensures that EVERY
transaction to the service does a "listen" to see if there are any pending commands to download to the
device, AND b) it turns off the typical cellular buffering that would cause uploads to occur only once
per hour.  This doesn't accelerate measurements or do anything else like that.

dt
This is a shortcut to the cfgdev command that toggles whether or not a device is denoted in NVRAM as being a
test device, and thus whether or not the service should ignore its data.

time
Get the current amount of time since device boot.

restart
reboot
Restart the device.  This is the equivalent of power cycling it.

dead
Toggle a mode that simulates whether or not ANY sensors are scheduled, for testing of sleep current.

twi
Get twi stats.  Useful when there's some kind of TWI error and it scrolled off the screen.  What is
displayed is:
  idle= is whether or not the Nordic runtime believes that a TWI transaction is in progress
  init= is the count of tt sensors that are currently using TWI
  t= the number of TWI transactions are currently in progress by tt sensors
  se= the total number of TWI transaction scheduling errors since boot
  ce= the total number of TWI transaction completion errors since boot
...followed by up to 250 characters that is a running log of "S:" scheduling or "C" completion errors

NOTE that occasionally you'll see a line called SENT displayed.  Here is what that means:
SENT” command…
- it’ll say SENT if it sent, WAIT if it couldn’t send because the chip is busy (and will retry later), and BUFF if it is buffered (cell phone only)
- there are a series of letters that indicate different potential payload contents, followed by a hyphen, a plus sign, or an X character.  Hyphen means “nothing to send”, plus means “I sent this stuff”, and X means “i wanted to send some stuff of this type, but it was too large so I am going to put it into the next message I send"
- S means that this payload has “statistics data”
- G means geiger data (with two hyphens because of #0 and #1)
- V means battery data (voltage, SOC, current)
- E means environmental data
- Pm is PMS data
- Op is OPC data
